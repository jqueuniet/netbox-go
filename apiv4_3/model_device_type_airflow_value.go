/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.3.7-Docker-3.3.0 (4.3)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiv4_2

import (
	"encoding/json"
	"fmt"
)

// DeviceTypeAirflowValue * `front-to-rear` - Front to rear * `rear-to-front` - Rear to front * `left-to-right` - Left to right * `right-to-left` - Right to left * `side-to-rear` - Side to rear * `rear-to-side` - Rear to side * `bottom-to-top` - Bottom to top * `top-to-bottom` - Top to bottom * `passive` - Passive * `mixed` - Mixed
type DeviceTypeAirflowValue string

// List of DeviceType_airflow_value
const (
	DEVICETYPEAIRFLOWVALUE_FRONT_TO_REAR DeviceTypeAirflowValue = "front-to-rear"
	DEVICETYPEAIRFLOWVALUE_REAR_TO_FRONT DeviceTypeAirflowValue = "rear-to-front"
	DEVICETYPEAIRFLOWVALUE_LEFT_TO_RIGHT DeviceTypeAirflowValue = "left-to-right"
	DEVICETYPEAIRFLOWVALUE_RIGHT_TO_LEFT DeviceTypeAirflowValue = "right-to-left"
	DEVICETYPEAIRFLOWVALUE_SIDE_TO_REAR  DeviceTypeAirflowValue = "side-to-rear"
	DEVICETYPEAIRFLOWVALUE_REAR_TO_SIDE  DeviceTypeAirflowValue = "rear-to-side"
	DEVICETYPEAIRFLOWVALUE_BOTTOM_TO_TOP DeviceTypeAirflowValue = "bottom-to-top"
	DEVICETYPEAIRFLOWVALUE_TOP_TO_BOTTOM DeviceTypeAirflowValue = "top-to-bottom"
	DEVICETYPEAIRFLOWVALUE_PASSIVE       DeviceTypeAirflowValue = "passive"
	DEVICETYPEAIRFLOWVALUE_MIXED         DeviceTypeAirflowValue = "mixed"
	DEVICETYPEAIRFLOWVALUE_EMPTY         DeviceTypeAirflowValue = ""
)

// All allowed values of DeviceTypeAirflowValue enum
var AllowedDeviceTypeAirflowValueEnumValues = []DeviceTypeAirflowValue{
	"front-to-rear",
	"rear-to-front",
	"left-to-right",
	"right-to-left",
	"side-to-rear",
	"rear-to-side",
	"bottom-to-top",
	"top-to-bottom",
	"passive",
	"mixed",
	"",
}

func (v *DeviceTypeAirflowValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceTypeAirflowValue(value)
	for _, existing := range AllowedDeviceTypeAirflowValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceTypeAirflowValue", value)
}

// NewDeviceTypeAirflowValueFromValue returns a pointer to a valid DeviceTypeAirflowValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceTypeAirflowValueFromValue(v string) (*DeviceTypeAirflowValue, error) {
	ev := DeviceTypeAirflowValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceTypeAirflowValue: valid values are %v", v, AllowedDeviceTypeAirflowValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceTypeAirflowValue) IsValid() bool {
	for _, existing := range AllowedDeviceTypeAirflowValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeviceType_airflow_value value
func (v DeviceTypeAirflowValue) Ptr() *DeviceTypeAirflowValue {
	return &v
}

type NullableDeviceTypeAirflowValue struct {
	value *DeviceTypeAirflowValue
	isSet bool
}

func (v NullableDeviceTypeAirflowValue) Get() *DeviceTypeAirflowValue {
	return v.value
}

func (v *NullableDeviceTypeAirflowValue) Set(val *DeviceTypeAirflowValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceTypeAirflowValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceTypeAirflowValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceTypeAirflowValue(val *DeviceTypeAirflowValue) *NullableDeviceTypeAirflowValue {
	return &NullableDeviceTypeAirflowValue{value: val, isSet: true}
}

func (v NullableDeviceTypeAirflowValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceTypeAirflowValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
