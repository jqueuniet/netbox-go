/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.4.4-Docker-3.4.1 (4.4)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiv4_4

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the BackgroundTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackgroundTask{}

// BackgroundTask struct for BackgroundTask
type BackgroundTask struct {
	Id                   string                 `json:"id"`
	Url                  string                 `json:"url"`
	Description          string                 `json:"description"`
	Origin               string                 `json:"origin"`
	FuncName             string                 `json:"func_name"`
	Args                 []interface{}          `json:"args"`
	Kwargs               map[string]interface{} `json:"kwargs"`
	Result               string                 `json:"result"`
	Timeout              int32                  `json:"timeout"`
	ResultTtl            int32                  `json:"result_ttl"`
	CreatedAt            time.Time              `json:"created_at"`
	EnqueuedAt           time.Time              `json:"enqueued_at"`
	StartedAt            time.Time              `json:"started_at"`
	EndedAt              time.Time              `json:"ended_at"`
	WorkerName           string                 `json:"worker_name"`
	Position             int32                  `json:"position"`
	Status               string                 `json:"status"`
	Meta                 map[string]interface{} `json:"meta"`
	LastHeartbeat        string                 `json:"last_heartbeat"`
	IsFinished           bool                   `json:"is_finished"`
	IsQueued             bool                   `json:"is_queued"`
	IsFailed             bool                   `json:"is_failed"`
	IsStarted            bool                   `json:"is_started"`
	IsDeferred           bool                   `json:"is_deferred"`
	IsCanceled           bool                   `json:"is_canceled"`
	IsScheduled          bool                   `json:"is_scheduled"`
	IsStopped            bool                   `json:"is_stopped"`
	AdditionalProperties map[string]interface{}
}

type _BackgroundTask BackgroundTask

// NewBackgroundTask instantiates a new BackgroundTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackgroundTask(id string, url string, description string, origin string, funcName string, args []interface{}, kwargs map[string]interface{}, result string, timeout int32, resultTtl int32, createdAt time.Time, enqueuedAt time.Time, startedAt time.Time, endedAt time.Time, workerName string, position int32, status string, meta map[string]interface{}, lastHeartbeat string, isFinished bool, isQueued bool, isFailed bool, isStarted bool, isDeferred bool, isCanceled bool, isScheduled bool, isStopped bool) *BackgroundTask {
	this := BackgroundTask{}
	this.Id = id
	this.Url = url
	this.Description = description
	this.Origin = origin
	this.FuncName = funcName
	this.Args = args
	this.Kwargs = kwargs
	this.Result = result
	this.Timeout = timeout
	this.ResultTtl = resultTtl
	this.CreatedAt = createdAt
	this.EnqueuedAt = enqueuedAt
	this.StartedAt = startedAt
	this.EndedAt = endedAt
	this.WorkerName = workerName
	this.Position = position
	this.Status = status
	this.Meta = meta
	this.LastHeartbeat = lastHeartbeat
	this.IsFinished = isFinished
	this.IsQueued = isQueued
	this.IsFailed = isFailed
	this.IsStarted = isStarted
	this.IsDeferred = isDeferred
	this.IsCanceled = isCanceled
	this.IsScheduled = isScheduled
	this.IsStopped = isStopped
	return &this
}

// NewBackgroundTaskWithDefaults instantiates a new BackgroundTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackgroundTaskWithDefaults() *BackgroundTask {
	this := BackgroundTask{}
	return &this
}

// GetId returns the Id field value
func (o *BackgroundTask) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BackgroundTask) SetId(v string) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *BackgroundTask) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *BackgroundTask) SetUrl(v string) {
	o.Url = v
}

// GetDescription returns the Description field value
func (o *BackgroundTask) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *BackgroundTask) SetDescription(v string) {
	o.Description = v
}

// GetOrigin returns the Origin field value
func (o *BackgroundTask) GetOrigin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *BackgroundTask) SetOrigin(v string) {
	o.Origin = v
}

// GetFuncName returns the FuncName field value
func (o *BackgroundTask) GetFuncName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FuncName
}

// GetFuncNameOk returns a tuple with the FuncName field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetFuncNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FuncName, true
}

// SetFuncName sets field value
func (o *BackgroundTask) SetFuncName(v string) {
	o.FuncName = v
}

// GetArgs returns the Args field value
func (o *BackgroundTask) GetArgs() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Args
}

// GetArgsOk returns a tuple with the Args field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetArgsOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Args, true
}

// SetArgs sets field value
func (o *BackgroundTask) SetArgs(v []interface{}) {
	o.Args = v
}

// GetKwargs returns the Kwargs field value
func (o *BackgroundTask) GetKwargs() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Kwargs
}

// GetKwargsOk returns a tuple with the Kwargs field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetKwargsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Kwargs, true
}

// SetKwargs sets field value
func (o *BackgroundTask) SetKwargs(v map[string]interface{}) {
	o.Kwargs = v
}

// GetResult returns the Result field value
func (o *BackgroundTask) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *BackgroundTask) SetResult(v string) {
	o.Result = v
}

// GetTimeout returns the Timeout field value
func (o *BackgroundTask) GetTimeout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeout, true
}

// SetTimeout sets field value
func (o *BackgroundTask) SetTimeout(v int32) {
	o.Timeout = v
}

// GetResultTtl returns the ResultTtl field value
func (o *BackgroundTask) GetResultTtl() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ResultTtl
}

// GetResultTtlOk returns a tuple with the ResultTtl field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetResultTtlOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultTtl, true
}

// SetResultTtl sets field value
func (o *BackgroundTask) SetResultTtl(v int32) {
	o.ResultTtl = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *BackgroundTask) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *BackgroundTask) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetEnqueuedAt returns the EnqueuedAt field value
func (o *BackgroundTask) GetEnqueuedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EnqueuedAt
}

// GetEnqueuedAtOk returns a tuple with the EnqueuedAt field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetEnqueuedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnqueuedAt, true
}

// SetEnqueuedAt sets field value
func (o *BackgroundTask) SetEnqueuedAt(v time.Time) {
	o.EnqueuedAt = v
}

// GetStartedAt returns the StartedAt field value
func (o *BackgroundTask) GetStartedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedAt, true
}

// SetStartedAt sets field value
func (o *BackgroundTask) SetStartedAt(v time.Time) {
	o.StartedAt = v
}

// GetEndedAt returns the EndedAt field value
func (o *BackgroundTask) GetEndedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndedAt
}

// GetEndedAtOk returns a tuple with the EndedAt field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetEndedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndedAt, true
}

// SetEndedAt sets field value
func (o *BackgroundTask) SetEndedAt(v time.Time) {
	o.EndedAt = v
}

// GetWorkerName returns the WorkerName field value
func (o *BackgroundTask) GetWorkerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkerName
}

// GetWorkerNameOk returns a tuple with the WorkerName field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetWorkerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkerName, true
}

// SetWorkerName sets field value
func (o *BackgroundTask) SetWorkerName(v string) {
	o.WorkerName = v
}

// GetPosition returns the Position field value
func (o *BackgroundTask) GetPosition() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetPositionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *BackgroundTask) SetPosition(v int32) {
	o.Position = v
}

// GetStatus returns the Status field value
func (o *BackgroundTask) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BackgroundTask) SetStatus(v string) {
	o.Status = v
}

// GetMeta returns the Meta field value
func (o *BackgroundTask) GetMeta() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// SetMeta sets field value
func (o *BackgroundTask) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

// GetLastHeartbeat returns the LastHeartbeat field value
func (o *BackgroundTask) GetLastHeartbeat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastHeartbeat
}

// GetLastHeartbeatOk returns a tuple with the LastHeartbeat field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetLastHeartbeatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastHeartbeat, true
}

// SetLastHeartbeat sets field value
func (o *BackgroundTask) SetLastHeartbeat(v string) {
	o.LastHeartbeat = v
}

// GetIsFinished returns the IsFinished field value
func (o *BackgroundTask) GetIsFinished() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFinished
}

// GetIsFinishedOk returns a tuple with the IsFinished field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetIsFinishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsFinished, true
}

// SetIsFinished sets field value
func (o *BackgroundTask) SetIsFinished(v bool) {
	o.IsFinished = v
}

// GetIsQueued returns the IsQueued field value
func (o *BackgroundTask) GetIsQueued() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsQueued
}

// GetIsQueuedOk returns a tuple with the IsQueued field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetIsQueuedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsQueued, true
}

// SetIsQueued sets field value
func (o *BackgroundTask) SetIsQueued(v bool) {
	o.IsQueued = v
}

// GetIsFailed returns the IsFailed field value
func (o *BackgroundTask) GetIsFailed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFailed
}

// GetIsFailedOk returns a tuple with the IsFailed field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetIsFailedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsFailed, true
}

// SetIsFailed sets field value
func (o *BackgroundTask) SetIsFailed(v bool) {
	o.IsFailed = v
}

// GetIsStarted returns the IsStarted field value
func (o *BackgroundTask) GetIsStarted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsStarted
}

// GetIsStartedOk returns a tuple with the IsStarted field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetIsStartedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsStarted, true
}

// SetIsStarted sets field value
func (o *BackgroundTask) SetIsStarted(v bool) {
	o.IsStarted = v
}

// GetIsDeferred returns the IsDeferred field value
func (o *BackgroundTask) GetIsDeferred() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDeferred
}

// GetIsDeferredOk returns a tuple with the IsDeferred field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetIsDeferredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDeferred, true
}

// SetIsDeferred sets field value
func (o *BackgroundTask) SetIsDeferred(v bool) {
	o.IsDeferred = v
}

// GetIsCanceled returns the IsCanceled field value
func (o *BackgroundTask) GetIsCanceled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsCanceled
}

// GetIsCanceledOk returns a tuple with the IsCanceled field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetIsCanceledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsCanceled, true
}

// SetIsCanceled sets field value
func (o *BackgroundTask) SetIsCanceled(v bool) {
	o.IsCanceled = v
}

// GetIsScheduled returns the IsScheduled field value
func (o *BackgroundTask) GetIsScheduled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsScheduled
}

// GetIsScheduledOk returns a tuple with the IsScheduled field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetIsScheduledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsScheduled, true
}

// SetIsScheduled sets field value
func (o *BackgroundTask) SetIsScheduled(v bool) {
	o.IsScheduled = v
}

// GetIsStopped returns the IsStopped field value
func (o *BackgroundTask) GetIsStopped() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsStopped
}

// GetIsStoppedOk returns a tuple with the IsStopped field value
// and a boolean to check if the value has been set.
func (o *BackgroundTask) GetIsStoppedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsStopped, true
}

// SetIsStopped sets field value
func (o *BackgroundTask) SetIsStopped(v bool) {
	o.IsStopped = v
}

func (o BackgroundTask) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackgroundTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	toSerialize["description"] = o.Description
	toSerialize["origin"] = o.Origin
	toSerialize["func_name"] = o.FuncName
	toSerialize["args"] = o.Args
	toSerialize["kwargs"] = o.Kwargs
	toSerialize["result"] = o.Result
	toSerialize["timeout"] = o.Timeout
	toSerialize["result_ttl"] = o.ResultTtl
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["enqueued_at"] = o.EnqueuedAt
	toSerialize["started_at"] = o.StartedAt
	toSerialize["ended_at"] = o.EndedAt
	toSerialize["worker_name"] = o.WorkerName
	toSerialize["position"] = o.Position
	toSerialize["status"] = o.Status
	toSerialize["meta"] = o.Meta
	toSerialize["last_heartbeat"] = o.LastHeartbeat
	toSerialize["is_finished"] = o.IsFinished
	toSerialize["is_queued"] = o.IsQueued
	toSerialize["is_failed"] = o.IsFailed
	toSerialize["is_started"] = o.IsStarted
	toSerialize["is_deferred"] = o.IsDeferred
	toSerialize["is_canceled"] = o.IsCanceled
	toSerialize["is_scheduled"] = o.IsScheduled
	toSerialize["is_stopped"] = o.IsStopped

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BackgroundTask) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"url",
		"description",
		"origin",
		"func_name",
		"args",
		"kwargs",
		"result",
		"timeout",
		"result_ttl",
		"created_at",
		"enqueued_at",
		"started_at",
		"ended_at",
		"worker_name",
		"position",
		"status",
		"meta",
		"last_heartbeat",
		"is_finished",
		"is_queued",
		"is_failed",
		"is_started",
		"is_deferred",
		"is_canceled",
		"is_scheduled",
		"is_stopped",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varBackgroundTask := _BackgroundTask{}

	err = json.Unmarshal(data, &varBackgroundTask)

	if err != nil {
		return err
	}

	*o = BackgroundTask(varBackgroundTask)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "description")
		delete(additionalProperties, "origin")
		delete(additionalProperties, "func_name")
		delete(additionalProperties, "args")
		delete(additionalProperties, "kwargs")
		delete(additionalProperties, "result")
		delete(additionalProperties, "timeout")
		delete(additionalProperties, "result_ttl")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "enqueued_at")
		delete(additionalProperties, "started_at")
		delete(additionalProperties, "ended_at")
		delete(additionalProperties, "worker_name")
		delete(additionalProperties, "position")
		delete(additionalProperties, "status")
		delete(additionalProperties, "meta")
		delete(additionalProperties, "last_heartbeat")
		delete(additionalProperties, "is_finished")
		delete(additionalProperties, "is_queued")
		delete(additionalProperties, "is_failed")
		delete(additionalProperties, "is_started")
		delete(additionalProperties, "is_deferred")
		delete(additionalProperties, "is_canceled")
		delete(additionalProperties, "is_scheduled")
		delete(additionalProperties, "is_stopped")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBackgroundTask struct {
	value *BackgroundTask
	isSet bool
}

func (v NullableBackgroundTask) Get() *BackgroundTask {
	return v.value
}

func (v *NullableBackgroundTask) Set(val *BackgroundTask) {
	v.value = val
	v.isSet = true
}

func (v NullableBackgroundTask) IsSet() bool {
	return v.isSet
}

func (v *NullableBackgroundTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackgroundTask(val *BackgroundTask) *NullableBackgroundTask {
	return &NullableBackgroundTask{value: val, isSet: true}
}

func (v NullableBackgroundTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackgroundTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
