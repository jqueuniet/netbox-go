/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.4.4-Docker-3.4.1 (4.4)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiv4_4

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the BackgroundTaskRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackgroundTaskRequest{}

// BackgroundTaskRequest struct for BackgroundTaskRequest
type BackgroundTaskRequest struct {
	Id                   string                 `json:"id"`
	Description          string                 `json:"description"`
	Origin               string                 `json:"origin"`
	FuncName             string                 `json:"func_name"`
	Result               string                 `json:"result"`
	Timeout              int32                  `json:"timeout"`
	ResultTtl            int32                  `json:"result_ttl"`
	CreatedAt            time.Time              `json:"created_at"`
	EnqueuedAt           time.Time              `json:"enqueued_at"`
	StartedAt            time.Time              `json:"started_at"`
	EndedAt              time.Time              `json:"ended_at"`
	WorkerName           string                 `json:"worker_name"`
	Meta                 map[string]interface{} `json:"meta"`
	LastHeartbeat        string                 `json:"last_heartbeat"`
	IsFinished           bool                   `json:"is_finished"`
	IsQueued             bool                   `json:"is_queued"`
	IsFailed             bool                   `json:"is_failed"`
	IsStarted            bool                   `json:"is_started"`
	IsDeferred           bool                   `json:"is_deferred"`
	IsCanceled           bool                   `json:"is_canceled"`
	IsScheduled          bool                   `json:"is_scheduled"`
	IsStopped            bool                   `json:"is_stopped"`
	AdditionalProperties map[string]interface{}
}

type _BackgroundTaskRequest BackgroundTaskRequest

// NewBackgroundTaskRequest instantiates a new BackgroundTaskRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackgroundTaskRequest(id string, description string, origin string, funcName string, result string, timeout int32, resultTtl int32, createdAt time.Time, enqueuedAt time.Time, startedAt time.Time, endedAt time.Time, workerName string, meta map[string]interface{}, lastHeartbeat string, isFinished bool, isQueued bool, isFailed bool, isStarted bool, isDeferred bool, isCanceled bool, isScheduled bool, isStopped bool) *BackgroundTaskRequest {
	this := BackgroundTaskRequest{}
	this.Id = id
	this.Description = description
	this.Origin = origin
	this.FuncName = funcName
	this.Result = result
	this.Timeout = timeout
	this.ResultTtl = resultTtl
	this.CreatedAt = createdAt
	this.EnqueuedAt = enqueuedAt
	this.StartedAt = startedAt
	this.EndedAt = endedAt
	this.WorkerName = workerName
	this.Meta = meta
	this.LastHeartbeat = lastHeartbeat
	this.IsFinished = isFinished
	this.IsQueued = isQueued
	this.IsFailed = isFailed
	this.IsStarted = isStarted
	this.IsDeferred = isDeferred
	this.IsCanceled = isCanceled
	this.IsScheduled = isScheduled
	this.IsStopped = isStopped
	return &this
}

// NewBackgroundTaskRequestWithDefaults instantiates a new BackgroundTaskRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackgroundTaskRequestWithDefaults() *BackgroundTaskRequest {
	this := BackgroundTaskRequest{}
	return &this
}

// GetId returns the Id field value
func (o *BackgroundTaskRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BackgroundTaskRequest) SetId(v string) {
	o.Id = v
}

// GetDescription returns the Description field value
func (o *BackgroundTaskRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *BackgroundTaskRequest) SetDescription(v string) {
	o.Description = v
}

// GetOrigin returns the Origin field value
func (o *BackgroundTaskRequest) GetOrigin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *BackgroundTaskRequest) SetOrigin(v string) {
	o.Origin = v
}

// GetFuncName returns the FuncName field value
func (o *BackgroundTaskRequest) GetFuncName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FuncName
}

// GetFuncNameOk returns a tuple with the FuncName field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetFuncNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FuncName, true
}

// SetFuncName sets field value
func (o *BackgroundTaskRequest) SetFuncName(v string) {
	o.FuncName = v
}

// GetResult returns the Result field value
func (o *BackgroundTaskRequest) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *BackgroundTaskRequest) SetResult(v string) {
	o.Result = v
}

// GetTimeout returns the Timeout field value
func (o *BackgroundTaskRequest) GetTimeout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeout, true
}

// SetTimeout sets field value
func (o *BackgroundTaskRequest) SetTimeout(v int32) {
	o.Timeout = v
}

// GetResultTtl returns the ResultTtl field value
func (o *BackgroundTaskRequest) GetResultTtl() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ResultTtl
}

// GetResultTtlOk returns a tuple with the ResultTtl field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetResultTtlOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultTtl, true
}

// SetResultTtl sets field value
func (o *BackgroundTaskRequest) SetResultTtl(v int32) {
	o.ResultTtl = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *BackgroundTaskRequest) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *BackgroundTaskRequest) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetEnqueuedAt returns the EnqueuedAt field value
func (o *BackgroundTaskRequest) GetEnqueuedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EnqueuedAt
}

// GetEnqueuedAtOk returns a tuple with the EnqueuedAt field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetEnqueuedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnqueuedAt, true
}

// SetEnqueuedAt sets field value
func (o *BackgroundTaskRequest) SetEnqueuedAt(v time.Time) {
	o.EnqueuedAt = v
}

// GetStartedAt returns the StartedAt field value
func (o *BackgroundTaskRequest) GetStartedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedAt, true
}

// SetStartedAt sets field value
func (o *BackgroundTaskRequest) SetStartedAt(v time.Time) {
	o.StartedAt = v
}

// GetEndedAt returns the EndedAt field value
func (o *BackgroundTaskRequest) GetEndedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndedAt
}

// GetEndedAtOk returns a tuple with the EndedAt field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetEndedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndedAt, true
}

// SetEndedAt sets field value
func (o *BackgroundTaskRequest) SetEndedAt(v time.Time) {
	o.EndedAt = v
}

// GetWorkerName returns the WorkerName field value
func (o *BackgroundTaskRequest) GetWorkerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkerName
}

// GetWorkerNameOk returns a tuple with the WorkerName field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetWorkerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkerName, true
}

// SetWorkerName sets field value
func (o *BackgroundTaskRequest) SetWorkerName(v string) {
	o.WorkerName = v
}

// GetMeta returns the Meta field value
func (o *BackgroundTaskRequest) GetMeta() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// SetMeta sets field value
func (o *BackgroundTaskRequest) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

// GetLastHeartbeat returns the LastHeartbeat field value
func (o *BackgroundTaskRequest) GetLastHeartbeat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastHeartbeat
}

// GetLastHeartbeatOk returns a tuple with the LastHeartbeat field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetLastHeartbeatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastHeartbeat, true
}

// SetLastHeartbeat sets field value
func (o *BackgroundTaskRequest) SetLastHeartbeat(v string) {
	o.LastHeartbeat = v
}

// GetIsFinished returns the IsFinished field value
func (o *BackgroundTaskRequest) GetIsFinished() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFinished
}

// GetIsFinishedOk returns a tuple with the IsFinished field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetIsFinishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsFinished, true
}

// SetIsFinished sets field value
func (o *BackgroundTaskRequest) SetIsFinished(v bool) {
	o.IsFinished = v
}

// GetIsQueued returns the IsQueued field value
func (o *BackgroundTaskRequest) GetIsQueued() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsQueued
}

// GetIsQueuedOk returns a tuple with the IsQueued field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetIsQueuedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsQueued, true
}

// SetIsQueued sets field value
func (o *BackgroundTaskRequest) SetIsQueued(v bool) {
	o.IsQueued = v
}

// GetIsFailed returns the IsFailed field value
func (o *BackgroundTaskRequest) GetIsFailed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFailed
}

// GetIsFailedOk returns a tuple with the IsFailed field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetIsFailedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsFailed, true
}

// SetIsFailed sets field value
func (o *BackgroundTaskRequest) SetIsFailed(v bool) {
	o.IsFailed = v
}

// GetIsStarted returns the IsStarted field value
func (o *BackgroundTaskRequest) GetIsStarted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsStarted
}

// GetIsStartedOk returns a tuple with the IsStarted field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetIsStartedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsStarted, true
}

// SetIsStarted sets field value
func (o *BackgroundTaskRequest) SetIsStarted(v bool) {
	o.IsStarted = v
}

// GetIsDeferred returns the IsDeferred field value
func (o *BackgroundTaskRequest) GetIsDeferred() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDeferred
}

// GetIsDeferredOk returns a tuple with the IsDeferred field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetIsDeferredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDeferred, true
}

// SetIsDeferred sets field value
func (o *BackgroundTaskRequest) SetIsDeferred(v bool) {
	o.IsDeferred = v
}

// GetIsCanceled returns the IsCanceled field value
func (o *BackgroundTaskRequest) GetIsCanceled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsCanceled
}

// GetIsCanceledOk returns a tuple with the IsCanceled field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetIsCanceledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsCanceled, true
}

// SetIsCanceled sets field value
func (o *BackgroundTaskRequest) SetIsCanceled(v bool) {
	o.IsCanceled = v
}

// GetIsScheduled returns the IsScheduled field value
func (o *BackgroundTaskRequest) GetIsScheduled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsScheduled
}

// GetIsScheduledOk returns a tuple with the IsScheduled field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetIsScheduledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsScheduled, true
}

// SetIsScheduled sets field value
func (o *BackgroundTaskRequest) SetIsScheduled(v bool) {
	o.IsScheduled = v
}

// GetIsStopped returns the IsStopped field value
func (o *BackgroundTaskRequest) GetIsStopped() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsStopped
}

// GetIsStoppedOk returns a tuple with the IsStopped field value
// and a boolean to check if the value has been set.
func (o *BackgroundTaskRequest) GetIsStoppedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsStopped, true
}

// SetIsStopped sets field value
func (o *BackgroundTaskRequest) SetIsStopped(v bool) {
	o.IsStopped = v
}

func (o BackgroundTaskRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackgroundTaskRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["description"] = o.Description
	toSerialize["origin"] = o.Origin
	toSerialize["func_name"] = o.FuncName
	toSerialize["result"] = o.Result
	toSerialize["timeout"] = o.Timeout
	toSerialize["result_ttl"] = o.ResultTtl
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["enqueued_at"] = o.EnqueuedAt
	toSerialize["started_at"] = o.StartedAt
	toSerialize["ended_at"] = o.EndedAt
	toSerialize["worker_name"] = o.WorkerName
	toSerialize["meta"] = o.Meta
	toSerialize["last_heartbeat"] = o.LastHeartbeat
	toSerialize["is_finished"] = o.IsFinished
	toSerialize["is_queued"] = o.IsQueued
	toSerialize["is_failed"] = o.IsFailed
	toSerialize["is_started"] = o.IsStarted
	toSerialize["is_deferred"] = o.IsDeferred
	toSerialize["is_canceled"] = o.IsCanceled
	toSerialize["is_scheduled"] = o.IsScheduled
	toSerialize["is_stopped"] = o.IsStopped

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BackgroundTaskRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"description",
		"origin",
		"func_name",
		"result",
		"timeout",
		"result_ttl",
		"created_at",
		"enqueued_at",
		"started_at",
		"ended_at",
		"worker_name",
		"meta",
		"last_heartbeat",
		"is_finished",
		"is_queued",
		"is_failed",
		"is_started",
		"is_deferred",
		"is_canceled",
		"is_scheduled",
		"is_stopped",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{}{}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil {
			return err
		}
	}
	varBackgroundTaskRequest := _BackgroundTaskRequest{}

	err = json.Unmarshal(data, &varBackgroundTaskRequest)

	if err != nil {
		return err
	}

	*o = BackgroundTaskRequest(varBackgroundTaskRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "description")
		delete(additionalProperties, "origin")
		delete(additionalProperties, "func_name")
		delete(additionalProperties, "result")
		delete(additionalProperties, "timeout")
		delete(additionalProperties, "result_ttl")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "enqueued_at")
		delete(additionalProperties, "started_at")
		delete(additionalProperties, "ended_at")
		delete(additionalProperties, "worker_name")
		delete(additionalProperties, "meta")
		delete(additionalProperties, "last_heartbeat")
		delete(additionalProperties, "is_finished")
		delete(additionalProperties, "is_queued")
		delete(additionalProperties, "is_failed")
		delete(additionalProperties, "is_started")
		delete(additionalProperties, "is_deferred")
		delete(additionalProperties, "is_canceled")
		delete(additionalProperties, "is_scheduled")
		delete(additionalProperties, "is_stopped")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBackgroundTaskRequest struct {
	value *BackgroundTaskRequest
	isSet bool
}

func (v NullableBackgroundTaskRequest) Get() *BackgroundTaskRequest {
	return v.value
}

func (v *NullableBackgroundTaskRequest) Set(val *BackgroundTaskRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBackgroundTaskRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBackgroundTaskRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackgroundTaskRequest(val *BackgroundTaskRequest) *NullableBackgroundTaskRequest {
	return &NullableBackgroundTaskRequest{value: val, isSet: true}
}

func (v NullableBackgroundTaskRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackgroundTaskRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
