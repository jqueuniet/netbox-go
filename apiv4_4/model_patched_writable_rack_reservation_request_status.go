/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.4.4-Docker-3.4.1 (4.4)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiv4_2

import (
	"encoding/json"
	"fmt"
)

// PatchedWritableRackReservationRequestStatus * `pending` - Pending * `active` - Active * `stale` - Stale
type PatchedWritableRackReservationRequestStatus string

// List of PatchedWritableRackReservationRequest_status
const (
	PATCHEDWRITABLERACKRESERVATIONREQUESTSTATUS_PENDING PatchedWritableRackReservationRequestStatus = "pending"
	PATCHEDWRITABLERACKRESERVATIONREQUESTSTATUS_ACTIVE  PatchedWritableRackReservationRequestStatus = "active"
	PATCHEDWRITABLERACKRESERVATIONREQUESTSTATUS_STALE   PatchedWritableRackReservationRequestStatus = "stale"
)

// All allowed values of PatchedWritableRackReservationRequestStatus enum
var AllowedPatchedWritableRackReservationRequestStatusEnumValues = []PatchedWritableRackReservationRequestStatus{
	"pending",
	"active",
	"stale",
}

func (v *PatchedWritableRackReservationRequestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchedWritableRackReservationRequestStatus(value)
	for _, existing := range AllowedPatchedWritableRackReservationRequestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchedWritableRackReservationRequestStatus", value)
}

// NewPatchedWritableRackReservationRequestStatusFromValue returns a pointer to a valid PatchedWritableRackReservationRequestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchedWritableRackReservationRequestStatusFromValue(v string) (*PatchedWritableRackReservationRequestStatus, error) {
	ev := PatchedWritableRackReservationRequestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchedWritableRackReservationRequestStatus: valid values are %v", v, AllowedPatchedWritableRackReservationRequestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchedWritableRackReservationRequestStatus) IsValid() bool {
	for _, existing := range AllowedPatchedWritableRackReservationRequestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PatchedWritableRackReservationRequest_status value
func (v PatchedWritableRackReservationRequestStatus) Ptr() *PatchedWritableRackReservationRequestStatus {
	return &v
}

type NullablePatchedWritableRackReservationRequestStatus struct {
	value *PatchedWritableRackReservationRequestStatus
	isSet bool
}

func (v NullablePatchedWritableRackReservationRequestStatus) Get() *PatchedWritableRackReservationRequestStatus {
	return v.value
}

func (v *NullablePatchedWritableRackReservationRequestStatus) Set(val *PatchedWritableRackReservationRequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWritableRackReservationRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWritableRackReservationRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWritableRackReservationRequestStatus(val *PatchedWritableRackReservationRequestStatus) *NullablePatchedWritableRackReservationRequestStatus {
	return &NullablePatchedWritableRackReservationRequestStatus{value: val, isSet: true}
}

func (v NullablePatchedWritableRackReservationRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWritableRackReservationRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
