/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.4.4-Docker-3.4.1 (4.4)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiv4_2

import (
	"encoding/json"
	"fmt"
)

// RackReservationStatusLabel the model 'RackReservationStatusLabel'
type RackReservationStatusLabel string

// List of RackReservation_status_label
const (
	RACKRESERVATIONSTATUSLABEL_PENDING RackReservationStatusLabel = "Pending"
	RACKRESERVATIONSTATUSLABEL_ACTIVE  RackReservationStatusLabel = "Active"
	RACKRESERVATIONSTATUSLABEL_STALE   RackReservationStatusLabel = "Stale"
)

// All allowed values of RackReservationStatusLabel enum
var AllowedRackReservationStatusLabelEnumValues = []RackReservationStatusLabel{
	"Pending",
	"Active",
	"Stale",
}

func (v *RackReservationStatusLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RackReservationStatusLabel(value)
	for _, existing := range AllowedRackReservationStatusLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RackReservationStatusLabel", value)
}

// NewRackReservationStatusLabelFromValue returns a pointer to a valid RackReservationStatusLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRackReservationStatusLabelFromValue(v string) (*RackReservationStatusLabel, error) {
	ev := RackReservationStatusLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RackReservationStatusLabel: valid values are %v", v, AllowedRackReservationStatusLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RackReservationStatusLabel) IsValid() bool {
	for _, existing := range AllowedRackReservationStatusLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RackReservation_status_label value
func (v RackReservationStatusLabel) Ptr() *RackReservationStatusLabel {
	return &v
}

type NullableRackReservationStatusLabel struct {
	value *RackReservationStatusLabel
	isSet bool
}

func (v NullableRackReservationStatusLabel) Get() *RackReservationStatusLabel {
	return v.value
}

func (v *NullableRackReservationStatusLabel) Set(val *RackReservationStatusLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableRackReservationStatusLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableRackReservationStatusLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRackReservationStatusLabel(val *RackReservationStatusLabel) *NullableRackReservationStatusLabel {
	return &NullableRackReservationStatusLabel{value: val, isSet: true}
}

func (v NullableRackReservationStatusLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRackReservationStatusLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
