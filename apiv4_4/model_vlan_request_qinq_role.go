/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.4.4-Docker-3.4.1 (4.4)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiv4_4

import (
	"encoding/json"
	"fmt"
)

// VLANRequestQinqRole * `svlan` - Service * `cvlan` - Customer
type VLANRequestQinqRole string

// List of VLANRequest_qinq_role
const (
	VLANREQUESTQINQROLE_SVLAN VLANRequestQinqRole = "svlan"
	VLANREQUESTQINQROLE_CVLAN VLANRequestQinqRole = "cvlan"
)

// All allowed values of VLANRequestQinqRole enum
var AllowedVLANRequestQinqRoleEnumValues = []VLANRequestQinqRole{
	"svlan",
	"cvlan",
}

func (v *VLANRequestQinqRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VLANRequestQinqRole(value)
	for _, existing := range AllowedVLANRequestQinqRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VLANRequestQinqRole", value)
}

// NewVLANRequestQinqRoleFromValue returns a pointer to a valid VLANRequestQinqRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVLANRequestQinqRoleFromValue(v string) (*VLANRequestQinqRole, error) {
	ev := VLANRequestQinqRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VLANRequestQinqRole: valid values are %v", v, AllowedVLANRequestQinqRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VLANRequestQinqRole) IsValid() bool {
	for _, existing := range AllowedVLANRequestQinqRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VLANRequest_qinq_role value
func (v VLANRequestQinqRole) Ptr() *VLANRequestQinqRole {
	return &v
}

type NullableVLANRequestQinqRole struct {
	value *VLANRequestQinqRole
	isSet bool
}

func (v NullableVLANRequestQinqRole) Get() *VLANRequestQinqRole {
	return v.value
}

func (v *NullableVLANRequestQinqRole) Set(val *VLANRequestQinqRole) {
	v.value = val
	v.isSet = true
}

func (v NullableVLANRequestQinqRole) IsSet() bool {
	return v.isSet
}

func (v *NullableVLANRequestQinqRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVLANRequestQinqRole(val *VLANRequestQinqRole) *NullableVLANRequestQinqRole {
	return &NullableVLANRequestQinqRole{value: val, isSet: true}
}

func (v NullableVLANRequestQinqRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVLANRequestQinqRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
